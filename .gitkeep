1. notes for code week 18 day 1 video 02:04:00

when creating a app you run npm run build

Build folder is the ready for the browser code

After building, examining our project's structure reveals a new BUILD 
folder containing production ready static assets including index.html, 
static/css & static/js folders, etc. If this React app was a frontend 
only app, the assets in the build folder would be ready to be deployed to any static hosting service.
This build folder of production-ready goodness is ready to be served up by an Express backend...

Code the Skeleton Express App

npm i express morgan serve-favicon

Then we will create server.js file for Skeleton Express App....

The -D is letting it be known that the dependency is only nessary for devlopment enviroment.
then add npm i -D nodemon

then goto package.json and add "dev": "nodemon server" in the script.

Now you can run backend by running npm run dev.

2. notes for code week 18 day 2 start video 01:29:00

create proxy in package.json at top level anywhere in the main part of the package. so anything happening on 3001 we're going to make it so that port 3000 will see things that run on port 3001 as itself. anything ran on 3001 port 3000 will also say thats also me.

"proxy": "http://localhost:3001"

Then 
Use the useStatehook to define a state variable named user!
Initialize user to null!
The setter function should be named according to convention!
Hint: Don't forget to add the necessary import! shown below ex.

import {useState} from 'react'

const [user, setUser] = useState(null)

Then Add Skeleton Page-Level Components in src folder. like AuthPage, NewOrderPage, and OrderHistorPage, then add the files.

. Conditionally Render Based On the userState

Then Switch the wrapper div in App for main, and remove all of its childrenâ€¦ then add the below code.

import AuthPage from '../AuthPage/AuthPage';
import NewOrderPage from './pages/NewOrderPage/NewOrderPage'; 

then do a turn 
{user ?
        <NewOrderPage />
        :
        <AuthPage />
      }

 if u see auth page it beacsue there a false value in the useState(null) <AuthPage />, if it was useState(1) or any truthy value you will see the  <NewOrderPage />   

//Since it's a third-party library, React Router must be installed:

npm i react-router-dom

The <BrowserRouter>Component
<BrowserRouter>is the top-level React Router component that makes React Router work.

import { BrowserRouter as Router } from 'react-router-dom';

then in App.js add this:
 import { Routes, Route } from'react-router-dom'
then wrap Routes within the Route with pages,with the path and elemets when the path is clicked the element tells you what page is displayed show below.

 <Routes>
          <Route path='/orders/new' element={<NewOrderPage />} />
          <Route path='/orders' element={<OrderHistoryPage />} />
</Routes>

3. week 19 day 1 review 02:47:20

# showed how to clone and create a branch to fix  code so it can be added to the main branch with fix code.

# what is babel!!!

# code sandbox review using classes 03:38:00
https://codesandbox.io/s/arthir-react-btn-with-class-and-state-z2wy6l

# to understand props look at this 
https://codesandbox.io/s/learning-state-and-hooks-1wfix2?file=/src/components/Counter.js

4. week 19 day 2 start 00:25:00

1. Add Folders to Organize the Express Server Code.

# mkdir config routes models controllers
1. above folders to organize the Express server-side code

2. for notes for backend check .gitkeep for the above folders

Implement dotenvMiddleware and Create a .env File
As we've done in the past, we need a way to access environment variables and secrets.

We're going to use the familiar dotenvmiddleware and .env file we used used in Unit 2 and is common in most Express apps.

install below
# npm i dotenv

// week 19 day 2 01:00:00 Always require and configure near the top in server.js file
require('dotenv').config();

in .gitignore file add .env so when u push to git hub it does push the .env file.the create .env file 

# .env is for secrets 

# install mongooseand Connect to a Database
1. Mongoose interact with a MongoDB database.

Mongoose is also the go to in MERN-Stack apps.

2. First, we need to install it as usual shown below:

# npm i mongoose

3. then add database.js to config folder then put mongoose coonection there

4. then add you mongoose database to .env

# server.js add this under 
require('./config/database'); the 
require('dotenv').config();

 show in server.js require('dotenv').config() is how we access our
./config/database file to connect to mongoose in our server.  

# stopped at 01:50:56

# setting up src folder with components to signup with classe's and the setting up login with use state.
